==========================
How to use 0-add_integer.py
==========================

This module defines an addition function ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the addition of its two arguments numbers

-------------------------

:: 

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(3, 2)
    5

::

    >>> add_integer(-2, 1)
    -1

::

    >>> add_integer(1.0, 2.0)
    3

    floats are casted to int


::

    >>> add_integer(1.2, -2)
    -1


::

    >>> add_integer(1)
    99

Non-Numbers
===========

If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer


::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer


::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
